# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_path_helpers.ipynb.

# %% auto 0
__all__ = ['to_points', 'discretize_path', 'discretize_paths']

# %% ../nbs/02_path_helpers.ipynb 5
import numpy


def to_points(parsed_path, n):
    prev = None
    acc = []
    step_size = 1.0 / n
    for x in np.arange(0.0, 1.0, step_size):
        _complex_pt = parsed_path.point(x)
        _x = _complex_pt.real
        _y = _complex_pt.imag
        pt = (_x, _y)
        acc.append(pt)
    return acc

# %% ../nbs/02_path_helpers.ipynb 6
def discretize_path(path, total_n=1000, min_n=3):
    chunk_size = path.length() / total_n
    subpaths = []
    for subpath in path.continuous_subpaths():
        sub_n = subpath.length() / chunk_size
        # drop paths shorter than the minimum number of points.
        if sub_n < min_n:
            continue
        # TODO: consider joining subpaths if the next start point is within 'dist' of this endpoint
        subpaths.append(np.array(to_points(subpath, n=sub_n)))
    return np.array(subpaths, dtype=object)

# %% ../nbs/02_path_helpers.ipynb 7
def discretize_paths(paths, total_n=1000, min_n=3):
    all_strokes = []
    total_length = sum([p.length() for p in paths])
    for p in paths:
        # compute number of points to generate for curr path based on ratio to total path length
        path_n = int(total_n * p.length() / total_length)
        # if number of points is less than the minimum, drop it.
        if path_n < min_n:
            # print(f"skipping path - path_n={path_n}, path_length={p.length()}, total_length={total_length}")
            continue
        # print(f"discretize path - path_n={path_n}, path_length={p.length()}, total_length={total_length}")

        strokes = discretize_path(p, path_n, min_n=min_n)

        # path_transform_str = attributes[i].get('transform', None)
        # if path_transform_str:
        #     print(f"path_transform_st={path_transform_str}")
        #     path_transform = build_transforms(path_transform_str)
        #     coords = apply_transform(coords, path_transform)

        all_strokes.extend(strokes)
    return all_strokes
